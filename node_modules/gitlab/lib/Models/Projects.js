// Generated by CoffeeScript 1.6.3
(function() {
  var BaseModel, Projects, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('./BaseModel');

  Projects = (function(_super) {
    __extends(Projects, _super);

    function Projects() {
      this.createu = __bind(this.createu, this);
      this.getArchive = __bind(this.getArchive, this);
      this.listCommits = __bind(this.listCommits, this);
      this.listMembers = __bind(this.listMembers, this);
      this.editMember = __bind(this.editMember, this);
      this.addMember = __bind(this.addMember, this);
      this.create = __bind(this.create, this);
      this.show = __bind(this.show, this);
      this.all = __bind(this.all, this);
      this.init = __bind(this.init, this);
      _ref = Projects.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Projects.prototype.init = function() {
      this.members = this.load('ProjectMembers');
      return this.hooks = this.load('ProjectHooks');
    };

    Projects.prototype.all = function(params, fn) {
      var _this = this;
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      if ('function' === typeof params) {
        fn = params;
        params = {};
      }
      this.debug("Projects::all()");
      if (params.per_page == null) {
        params.per_page = 100;
      }
      return this.get("projects", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.show = function(projectId, fn) {
      var _this = this;
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::show()");
      return this.get("projects/" + (parseInt(projectId)), function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.create = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::create()");
      return this.post("projects", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.addMember = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::addMember()");
      return this.post("projects/" + params.id + "/members", params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.editMember = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::editMember()");
      return this.put("projects/" + params.id + "/members/" + params.user_id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.listMembers = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::listMembers()");
      return this.get("projects/" + params.id + "/members", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.listCommits = function(params, fn) {
      var _this = this;
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::listCommits()");
      return this.get("projects/" + params.id + "/repository/commits", function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.createu = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("Projects::create()");
      return this.post("projects/user/" + params.user_id, params, function(data) {
        if (fn) {
          return fn(data);
        }
      });
    };

    Projects.prototype.getArchive = function(params, fn){
      var fs = require('fs');
      var request = require('request');

      var args = {
        'url': params.url + '/' + params.user + '/' + params.name + '/repository/archive?private_token=' + params.token
      };
      console.log(args);
      var archiveReq = request(args, function (e, r) {
        console.log(r.statusCode);
        console.log(r.headers);
      });
      archiveReq.pipe(fs.createWriteStream('test.tar.gz'));
    };

    return Projects;

  })(BaseModel);

  module.exports = function(client) {
    return new Projects(client);
  };

}).call(this);
