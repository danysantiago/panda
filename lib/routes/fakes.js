/**
 * Fake objects for testing and building. The Fakes also double as type
 * definitions for the request and response of each route.
 *
 * @author Samuel Rodriguez (samus250@gmail.com)
 */

/**
 * The fakes object. It contains an intput and an output object for each route.
 *
 * With the fakes we will build a very simple system. It will contain 2 users,
 * a student and a professor. There will be four courses in the system. These
 * were created by the professor and 3 of them are enrolled by the student.
 * One of the courses will have 3 assignments, two of them pending, and one of
 * them already completed by the student. One of the completed assignments will
 * be after the due date.
 *
 * Some of the routes will have extra objects, some of the extra objects might
 * be incomplete objects (some properties of the required type will be missing)
 *
 * Note: the _id fields are 24 character strings generated by MongoDB.
 */
var Fakes = {};
Fakes.professor = {
  'role': 'professor',
  'firstName': 'Pedro',
  'lastName': 'Rivera',
  'email': 'p.rivera@upr.edu',
  'repository': []
};

Fakes.student = {
  "role": "student",
  "firstName": "Samuel",
  "lastName": "Rodriguez",
  "email": "samuel.rodriguez8@upr.edu",
  'repository': [
    {
      '_id': 'ab324fe930940c203d38ed02',
      'path': 'http://pandagitlab/sytes.net/samuel.rodriguez8/'
          + 'ab324fe930940c203d38ed02'
    }
  ]
};
Fakes.users = [Fakes.professor, Fakes.student];

Fakes.assignment1 = {
  '_id': 'ab324fe930940c203d38ed02',
  'name': 'Assignment on Linked Lists',
  'description': 'Implement a dobly linked list',
  'totalScore': 100, 
  'deadline': 'November 15, 2013 23:55:00',
  'numOfTries': 2,
  'instructions': {
    'file': '/uploads/assignments/instructions/idHash}',
    'text': 'You have to implement a doubly linked list with the given classes.',
  },
  'testCases': [
    {
      'type': 'private',
      'score': 100,
      'timeLimit': 10,
      'memLimit': 500,
      'resource': {}
    }
  ]
};

Fakes.assignment2 = {
  '_id': '7728344fe317840c2eeed443',
  'name': 'Assignment on Priority Queue',
  'description': 'Implement a Priority Queue with a mean heap',
  'totalScore': 90, 
  'deadline': 'November 29, 2013 23:55:00',
  'numOfTries': 3,
  'instructions': {
    'file': '/uploads/assignments/instructions/7728344fe317840c2eeed443',
    'text': 'You have to implement a priority queue with your own min heap.',
  },
  'testCases': [
    {
      'type': 'private',
      'score': 90,
      'timeLimit': 5,
      'memLimit': 100,
      'resource': {}
    }
  ]
};

Fakes.assignment3 = {
  '_id': 'ffdead4fe17840c2eeedbeef',
  'name': 'Assignment on Graphs',
  'description': 'Implement an algorithm for finding an MST',
  'totalScore': 120, 
  'deadline': 'December 15, 2013 23:55:00',
  'numOfTries': 5,
  'instructions': {
    'file': '/uploads/assignments/instructions/ffdead4fe17840c2eeedbeef',
    'text': 'You have to implement an efficient MST algorithm for this.',
  },
  'testCases': [
    {
      'type': 'private',
      'score': 60,
      'timeLimit': 10,
      'memLimit': 500,
      'resource': {}
    },
    {
      'type': 'private',
      'score': 60,
      'timeLimit': 20,
      'memLimit': 1000,
      'resource': {}
    }
  ]
};

Fakes.assignment4 = {
  '_id': 'dead4fe930720c203d38beef',
  'name': 'Assignmnet on Dynamic Programming',
  'description': 'Implement a DP algorithm for solving the Knapsack problem',
  'totalScore': 50, 
  'deadline': 'December 22, 2013 23:55:00',
  'numOfTries': 1,
  'instructions': {
    'file': '/uploads/assignments/instructions/dead4fe930720c203d38beef',
    'text': 'You will have to implement a quick DP algorith for solving the problem',
  },
  'testCases': [
    {
      'type': 'private',
      'score': 50,
      'timeLimit': 2,
      'memLimit': 100,
      'resource': {}
    }
  ]
};
Fakes.assignments = [Fakes.assignment1, Fakes.assignment2, Fakes.assignment3,
    Fakes.assignment4];

Fakes.course1 = {
  '_id': 'beed4fe22345c203d38dead4',
  'users': ['samuel.rodriguez8@upr.edu', 'daniel.santiago@upr.edu'],
  'assignments': [Fakes.assignment1._id, Fakes.assignment2._id,
    Fakes.assignment3._id, Fakes.assignment4._id],
  'code': 'ICOM4035',
  'name': 'Data Structures',
  'year': '2013',
  'semester': 'Fall',
  'graders': ['p.rivera@upr.edu']
};

Fakes.course2 = {
  '_id': '418907150983127409123847',
  'users': ['samuel.rodriguez8@upr.edu'],
  'assignments': [Fakes.assignment1._id],
  'code': 'ICOM4036',
  'name': 'Programming Languages',
  'year': '2013',
  'semester': 'Fall',
  'graders': ['p.rivera@upr.edu']
};

Fakes.course3 = {
  '_id': 'beefdead1459810759012754',
  'users': ['samuel.rodriguez8@upr.edu'],
  'assignments': [Fakes.assignment1._id],
  'code': 'ICOM4009',
  'name': 'Software Engineering',
  'year': '2013',
  'semester': 'Fall',
  'graders': ['p.rivera@upr.edu']
};
Fakes.courses = [Fakes.course1, Fakes.course2, Fakes.course3];

Fakes.submission1 = {
  '_id': 'idHash...',
  'userId': 'samuel.rodriguez8@upr.edu',
  'assignmentId': Fakes.assignment1._id,
  'grade': 100, 
  'commitHash': 'somehash',
  'date': 'September 15, 2013 15:23:45',
  'compileTime': 3,
  'runTime': 7,
  'elpasedTime': 8
};

Fakes.submission2 = {
  '_id': 'idHash...',
  'userId': 'samuel.rodriguez8@upr.edu',
  'assignmentId': Fakes.assignment3._id,
  'grade': 120, 
  'commitHash': 'someHash',
  'date': 'October 31, 2013 15:15:14',
  'compileTime': 1,
  'runTime': 3,
  'elpasedTime': 3
};
Fakes.submissions = [Fakes.submission1, Fakes.submission2];

/**
 * End of fake entities.
 */

/**
 * Begin of fake route objects.
 */

/**
 * Returns a list of all userIds.
 */
Fakes.getUsers = function() {
  var userIds = [];
  Fakes.users.forEach(function(user) {
    userIds.push(user.email);
  });
  return userIds;
};

/**
 * Returns all the information of the user with the given id.
 */
Fakes.getUser = function(userId) {
  for (var i = 0; i < Fakes.users.length; i++) {
    if (Fakes.users[i].email == userId) {
      return Fakes.users[i];
    }
  }
};

/**
 * Returns a list of course IDs for the user.
 */
Fakes.getUserCourses = function(user) {
  var ids = [];
  Fakes.courses.forEach(function(course) {
    if (course.users.indexOf(user) > -1 || course.graders.indexOf(user) > -1) {
      ids.push(course._id);
    }
  });
  return ids;
};

/**
 * Returns a list of all assignment ids for a user.
 */
Fakes.getUserAssignments = function(user) {
  var courseIds = Fakes.getUserCourses(user);
  var assignments = [];
  courseIds.forEach(function(courseId) {
    assignments = assignments.concat(Fakes.getCourseAssignments(courseId));
  });
  return assignments;
};

/**
 * Returns a list of all submissions from a user.
 */
Fakes.getUserSubmissions = function(user) {
  var submissionIds = [];
  Fakes.submissions.forEach(function (submission) {
    if (submission.userId == user) {
      submissionIds.push(submission._id);
    }
  });
  return submissionIds;
};

/**
 * Returns a list of all course IDs.
 */
Fakes.getCourses = function() {
  var ids = [];
  Fakes.courses.forEach(function(course) {
    ids.push(course._id);
  });
  return ids;
};

/**
 * Returns the information of a given course Id.
 */
Fakes.getCourse = function(courseId) {
  for (var i = 0; i < Fakes.courses.length; i++) {
    if (Fakes.courses[i]._id == courseId) {
      return Fakes.courses[i];
    }
  }
};

/**
 * Returns the users of a course.
 */
Fakes.getCourseUsers = function(courseId) {
  var course = Fakes.getCourse(courseId);
  return course.users.concat(course.graders);
};

/**
 * Returns an array that contains the IDs of the assignments of a course.
 */
Fakes.getCourseAssignments = function(courseId) {
  var course = Fakes.getCourse(courseId);
  return course.assignments;
};

/**
 * An array that contains all the submissions for a course.
 */
Fakes.getCourseSubmissions = function(courseId) {
  var courseSubmissions = [];
  var courseAssignmentIds = Fakes.getCourseAssignments(courseId);
  courseAssignmentIds.forEach(function(assignmentId) {
      courseSubmissions = courseSubmissions.concat(
          Fakes.submissions.filter(function(submission) {
            return submission.assignmentId == assignmentId;
          })
      )
  });
  return courseSubmissions;
};

/**
 * Returns a list of assignment Ids.
 */
Fakes.getAssignments = function() {
  var assignmentIds = [];
  Fakes.assignments.forEach(function(assignment) {
    assignmentIds.push(assignment._id);
  });
  return assignmentIds;
};

/**
 * An object that contains all the information of an assignment. Returned with
 * assignment Id.
 */
Fakes.getAssignment = function(assignmentId) {
  for (var i = 0; i < Fakes.assignments.length; i++) {
    if (Fakes.assignments[i]._id == assignmentId) {
      return Fakes.assignments[i];
    }
  }
};

/**
 * Returns a list of submission Ids.
 */
Fakes.getSubmissions = function() {
  var submissionIds = [];
  Fakes.submissions.forEach(function(submission) {
    submissionIds.push(submission._id);
  });
  return submissionIds;
};

/**
 * Gets all submission information for a given submission id.
 */
Fakes.getSubmission = function(submissionId) {
  for (var i = 0; i < Fakes.submissions.length; i++) {
    if (Fakes.submissions[i]._id == submissionId) {
      return Fakes.submissions[i];
    }
  }
};

module.exports = Fakes;
